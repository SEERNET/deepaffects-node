/**
 * SeerNet Audio APIs
 * OpenAPI Specification of SeerNet audio APIs
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AsyncResponse', 'model/Audio', 'model/EmotionScore'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AsyncResponse'), require('../model/Audio'), require('../model/EmotionScore'));
  } else {
    // Browser globals (root is window)
    if (!root.SeerNetAudioApIs) {
      root.SeerNetAudioApIs = {};
    }
    root.SeerNetAudioApIs.EmotionApi = factory(root.SeerNetAudioApIs.ApiClient, root.SeerNetAudioApIs.AsyncResponse, root.SeerNetAudioApIs.Audio, root.SeerNetAudioApIs.EmotionScore);
  }
}(this, function(ApiClient, AsyncResponse, Audio, EmotionScore) {
  'use strict';

  /**
   * Emotion service.
   * @module api/EmotionApi
   * @version v1
   */

  /**
   * Constructs a new EmotionApi. 
   * @alias module:api/EmotionApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the asyncRecogniseEmotion operation.
     * @callback module:api/EmotionApi~asyncRecogniseEmotionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find emotion in an audio file
     * Extract emotion from an audio file.
     * @param {module:model/Audio} body Audio object that needs to be featurized.
     * @param {module:api/EmotionApi~asyncRecogniseEmotionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncResponse}
     */
    this.asyncRecogniseEmotion = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling asyncRecogniseEmotion");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AsyncResponse;

      return this.apiClient.callApi(
        '/api/v1/audio/async/recognise_emotion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the syncRecogniseEmotion operation.
     * @callback module:api/EmotionApi~syncRecogniseEmotionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EmotionScore>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find emotion in an audio file
     * Extract emotion from an audio file.
     * @param {module:model/Audio} body Audio object that needs to be featurized.
     * @param {module:api/EmotionApi~syncRecogniseEmotionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EmotionScore>}
     */
    this.syncRecogniseEmotion = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw new Error("Missing the required parameter 'body' when calling syncRecogniseEmotion");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['UserSecurity'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [EmotionScore];

      return this.apiClient.callApi(
        '/api/v1/audio/sync/recognise_emotion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
